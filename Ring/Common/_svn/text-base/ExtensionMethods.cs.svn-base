using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Web.Mvc;
using Microsoft.WindowsAzure.ServiceRuntime;

namespace OTP.Ring.Common
{
    [Serializable]
    public static class ExtensionMethods
    {
        public static string ToHtmlStyleString(this HtmlStyleAttribute.Styles stylingCode)
        {
            return HtmlStyleAttribute.GetStyleString(stylingCode);
        }

        public static string GetConfigurationSetting(string configurationSettingName)
        {
            string value = null;
            if (RoleEnvironment.IsAvailable)
            {
                value = RoleEnvironment.GetConfigurationSettingValue(configurationSettingName);
            }
            else
            {
                value = System.Configuration.ConfigurationManager.AppSettings[configurationSettingName].ToString();
                //var abc = System.Configuration.ConfigurationManager.ConnectionStrings["OTPDEVConnectionString"].ConnectionString;
            }

            return value;
        }

        public static string GetFormStringValue(this FormCollection form, string key)
        {
            if (!form.AllKeys.Contains(key) || string.IsNullOrEmpty(form[key])) return null;
            return form[key];
        }

        public static int? GetFormIntValue(this FormCollection form, string key)
        {
            if (!form.AllKeys.Contains(key)) return null;
            try
            { 
                return Convert.ToInt32(form[key]);
            }
            catch
            {
                return null;
            }
        }

        public static decimal? GetFormDecimalValue(this FormCollection form, string key)
        {
            if (!form.AllKeys.Contains(key)) return null;
            try
            {
                return Convert.ToDecimal(form[key]);
            }
            catch
            {
                return null;
            }
        }

        public static DateTime GetFormDateTimeValue(this FormCollection form, string key)
        {
            if (!form.AllKeys.Contains(key)) return DateTime.MinValue;
            try
            {
                return Convert.ToDateTime(form[key]);
            }
            catch
            {
                return DateTime.MinValue;
            }
        }

        public static bool GetFormBooleanValue(this FormCollection form, string key)
        {
            if (!form.AllKeys.Contains(key)) return false;
            try
            {
                return Convert.ToBoolean(form[key]);
            }
            catch
            {
                return false;
            }
        }

        public static bool GetFormBooleanValue(this FormCollection form, string name, string key)
        {
            if (!form.AllKeys.Contains(name)) return false;
            try
            {
                return form[name].Contains(key);
            }
            catch
            {
                return false;
            }
        }

        public static string ToUrlString(this string url)
        {
            string result = url;

            if (!string.IsNullOrEmpty(url))
            {
                if (!url.ToLower().StartsWith("http://"))
                {
                    url = "http://" + url;
                }

                Uri uri = new Uri(url);
                result = new Uri(url).AbsoluteUri;
            }

            return result;
        }

        public static void AddValidationMessage(this ModelStateDictionary modelState, string key, string message)
        {
            modelState.AddModelError(key,
                string.Format("<span class=\"\" htmlfor=\"{0}\" generated=\"true\" _for_validation_message=\"#{0}_validationMessage\">{1}</span>", key, message));
        }
    }
}
