using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using OTP.Ring.Data.Models;
using OTP.Ring.Common;
using OTP.Ring.Models.ViewModel;
using OTP.Ring.Models;
using System.Web.Mvc;
using Telerik.Web.Mvc;
using System.ComponentModel;
using System.Linq.Expressions;
using System.Transactions;

namespace OTP.Ring.Business
{
    public class ResourceBL : IResourceBL
    {
        private bool _frenchLanguage = false;
        private Data.Models.RingEntities _repository;
        private IDecodeBL _decodeBL;

        public ResourceBL(string connectionString, IDecodeBL decodeBL)
        {
            _frenchLanguage = System.Threading.Thread.CurrentThread.CurrentUICulture.TwoLetterISOLanguageName.ToUpper() == Constant.LanguageCode.French;
            _repository = new Data.Models.RingEntities(connectionString);
            this._decodeBL = decodeBL;
        }

        public int UpdateResource(
          	int resourceId,
	        string resourceTypeId = Constant.UndefinedString,
	        string resourceSpecialtyId = Constant.UndefinedString,
	        string firstName = Constant.UndefinedString,
	        string lastName = Constant.UndefinedString,
	        string countryId = Constant.UndefinedString,
	        string gender = Constant.UndefinedString,
	        DateTime? dateOfBirth = null,
	        string mailingAddress = Constant.UndefinedString,
	        string mailingCity = Constant.UndefinedString,
	        string mailingProvinceId = Constant.UndefinedString,
            string mailingCountryId = Constant.UndefinedString,
            string mailingPostalCode = Constant.UndefinedString,
	        string emailAddress = Constant.UndefinedString,
            string skypeName = Constant.UndefinedString,
	        string hometownCity = Constant.UndefinedString,
	        string hometownProvinceId = Constant.UndefinedString,
            string hometownCountryId = Constant.UndefinedString,
            string homePhone = Constant.UndefinedString,
            string cellPhone = Constant.UndefinedString,
	        string primaryCSCId = Constant.UndefinedString,
	        string secondaryCSCId = Constant.UndefinedString,
	        string comments = Constant.UndefinedString,
            bool? tbd = null,
            bool? pooled = null,
            bool? active = null,
            bool? isNew = false)
        {
            int changes = 0;

            var resource = (from r in this._repository.Resources
                            where r.ResourceID == resourceId
                            select r).First();

            resource.ResourceTypeID = resourceTypeId == Constant.UndefinedString ? resource.ResourceTypeID : resourceTypeId;
            resource.ResourceSpecialtyID = resourceSpecialtyId == Constant.UndefinedString ? resource.ResourceSpecialtyID : resourceSpecialtyId;
            resource.FirstName = firstName == Constant.UndefinedString ? resource.FirstName : firstName;
            resource.LastName = lastName == Constant.UndefinedString ? resource.LastName : lastName;
            resource.CountryID = countryId == Constant.UndefinedString ? resource.CountryID : countryId;
            resource.Gender = gender == Constant.UndefinedString ? resource.Gender : gender;
            resource.DateOfBirth = dateOfBirth ?? resource.DateOfBirth;
            resource.MailingAddress = mailingAddress == Constant.UndefinedString ? resource.MailingAddress : mailingAddress;
            resource.MailingCity = mailingCity == Constant.UndefinedString ? resource.MailingCity : mailingCity;
            resource.MailingProvinceID = mailingProvinceId == Constant.UndefinedString ? resource.MailingProvinceID : mailingProvinceId;
            resource.MailingCountryID = mailingCountryId == Constant.UndefinedString ? resource.MailingCountryID : mailingCountryId;
            resource.MailingPostalCode = mailingPostalCode == Constant.UndefinedString ? resource.MailingPostalCode : mailingPostalCode;
            resource.HomePhone = homePhone == Constant.UndefinedString ? resource.HomePhone : homePhone;
            resource.CellPhone = cellPhone == Constant.UndefinedString ? resource.CellPhone : cellPhone;
            resource.EMailAddress = emailAddress == Constant.UndefinedString ? resource.EMailAddress : emailAddress;
            resource.SkypeName = skypeName == Constant.UndefinedString ? resource.SkypeName : skypeName;
            resource.HometownCity = hometownCity == Constant.UndefinedString ? resource.HometownCity : hometownCity;
            resource.HometownProvinceID = hometownProvinceId == Constant.UndefinedString ? resource.HometownProvinceID : hometownProvinceId;
            resource.HometownCountryID = hometownCountryId == Constant.UndefinedString ? resource.HometownCountryID : hometownCountryId;
            resource.PrimaryCSCID = primaryCSCId == Constant.UndefinedString ? resource.PrimaryCSCID : primaryCSCId;
            resource.SecondaryCSCID = secondaryCSCId == Constant.UndefinedString ? resource.SecondaryCSCID : secondaryCSCId;
            resource.Comments = comments == Constant.UndefinedString ? resource.Comments : comments;
            resource.TBD = tbd ?? resource.TBD;
            resource.Pooled = pooled ?? resource.Pooled;
            resource.Active = active ?? resource.Active;
            resource.New = isNew ?? resource.New;

            //Update Resource
            var updateResourceReturnValue = this._repository.uspUpdateResource(
                resource.ResourceID,
                resource.ResourceTypeID,
                resource.ResourceSpecialtyID,
                resource.FirstName,
                resource.LastName,
                resource.CountryID,
                resource.Gender,
                resource.DateOfBirth,
                resource.MailingAddress,
                resource.MailingCity,
                resource.MailingProvinceID,
                resource.MailingCountryID,
                resource.MailingPostalCode,
                resource.HomePhone,
                resource.CellPhone,
                resource.EMailAddress,
                resource.SkypeName,
                resource.HometownCity,
                resource.HometownProvinceID,
                resource.HometownCountryID,
                resource.PrimaryCSCID,
                resource.SecondaryCSCID,
                resource.Comments,
                resource.TBD,
                resource.Pooled,
                resource.New,
                resource.Active).SingleOrDefault();

            changes = updateResourceReturnValue == null ? changes : changes + (int)updateResourceReturnValue;

            return changes;
        }

        public bool ShouldPrompResourceExists(string resourceTypeId, string firstName, string lastName, string countryId)
        {
            firstName = firstName.ToLower();
            lastName = lastName.ToLower();

            var exists = (from r in this._repository.Resources
                          where r.Active
                          && r.ResourceTypeID == resourceTypeId
                          && r.FirstName.ToLower().Contains(firstName)
                          && r.LastName.ToLower().Contains(lastName)
                          select r).Any();

            return exists;
        }

        public int AddResource(
            string resourceTypeId,
            string firstName,
            string lastName,
            string countryId,
            bool tbd,
            bool pooled,
            bool active,
            string resourceClassId = null,
            string resourceSpecialtyId = null,
            string gender = null,
            DateTime? dateOfBirth = null,
            string mailingAddress = null,
            string mailingCity = null,
            string mailingProvinceId = null,
            string emailAddress = null,
            string hometownCity = null,
            string hometownProvinceId = null,
            string primaryCSCId = null,
            string secondaryCSCId = null,
            string comments = null,
            bool isNew = true,
            string assignSportId = null,
            string yearId = null,
            int? personalCoachId = null
            )
        {
            int changes = 0;

            using (TransactionScope scope = new TransactionScope())
            {
                var returnValue = this._repository.uspAddResource(
                    resourceTypeId,
                    resourceClassId,
                    resourceSpecialtyId,
                    firstName,
                    lastName,
                    countryId,
                    gender,
                    dateOfBirth,
                    mailingAddress,
                    mailingCity,
                    mailingProvinceId,
                    emailAddress,
                    hometownCity,
                    hometownProvinceId,
                    primaryCSCId,
                    secondaryCSCId,
                    comments,
                    active,
                    tbd,
                    pooled,
                    isNew).SingleOrDefault();

                var resourceId = returnValue == null ? changes : (int)returnValue;

                //Add Athlete Personal Coach, SportID == Constant.SportId.All in ResourceSports is used as Athlete personal coach
                if (resourceId != 0)
                {
                    changes = SavePersonalCoach(resourceId, personalCoachId, yearId);
                }

                if (!string.IsNullOrEmpty(assignSportId))
                {
                    AddResourceSport(
                        resourceId,
                        assignSportId,
                        yearId,
                        resourceClassId,
                        null,
                        null,
                        null,
                        null,
                        null);
                }

                scope.Complete();
            }

            return changes;
        }

        public int AddResourceAffiliate(
	        string affiliateTypeId,
	        int resourceId,
	        string yearFromId,
	        string yearToId,
	        string affiliateName,
            string description,
	        string affiliateContact,
	        string affiliateEmail,
	        string comments)
        {
            int changes = 0;

            var returnValue = this._repository.uspAddResourceAffiliate(
                affiliateTypeId,
                resourceId,
                yearFromId,
                yearToId,
                affiliateName,
                description,
                affiliateContact,
                affiliateEmail,
                comments).SingleOrDefault();

            changes = returnValue == null ? changes : (int)returnValue;

            return changes;
        }

        public int UpdateResourceAffiliate(
            int resourceAffiliateId,
            string affiliateTypeId = Constant.UndefinedString,
            int? resourceId = null,
            string yearFromId = Constant.UndefinedString,
            string yearToId = Constant.UndefinedString,
            string affiliateName = Constant.UndefinedString,
            string description = Constant.UndefinedString,
            string affiliateContact = Constant.UndefinedString,
            string affiliateEmail = Constant.UndefinedString,
            string comments = Constant.UndefinedString)
        {
            int changes = 0;

            var affiliate = (from r in this._repository.ResourceAffiliates
                            where r.ResourceAffiliateID == resourceAffiliateId
                            select r).First();

            affiliate.AffiliateTypeID = affiliateTypeId == Constant.UndefinedString ? affiliate.AffiliateTypeID : affiliateTypeId;
            affiliate.ResourceID = resourceId ?? affiliate.ResourceID;
            affiliate.YearFromID = yearFromId == Constant.UndefinedString ? affiliate.YearFromID : yearFromId;
            affiliate.YearToID = yearToId == Constant.UndefinedString ? affiliate.YearToID : yearToId;
            affiliate.AffiliateName = affiliateName == Constant.UndefinedString ? affiliate.AffiliateName : affiliateName;
            affiliate.Description = description == Constant.UndefinedString ? affiliate.Description : description;
            affiliate.AffiliateContact = affiliateContact == Constant.UndefinedString ? affiliate.AffiliateContact : affiliateContact;
            affiliate.AffiliateEmail = affiliateEmail == Constant.UndefinedString ? affiliate.AffiliateEmail : affiliateEmail;
            affiliate.Comments = comments == Constant.UndefinedString ? affiliate.Comments : comments;

            //Update Resource Affiliate
            var updateAffiliateReturnValue = this._repository.uspUpdateResourceAffiliate(
                affiliate.ResourceAffiliateID,
                affiliate.AffiliateTypeID,
                affiliate.ResourceID,
                affiliate.YearFromID,
                affiliate.YearToID,
                affiliate.AffiliateName,
                affiliate.Description,
                affiliate.AffiliateContact,
                affiliate.AffiliateEmail,
                affiliate.Comments).SingleOrDefault();

            changes = updateAffiliateReturnValue == null ? changes : changes + (int)updateAffiliateReturnValue;

            return changes;
        }

        public int AddResourceDirectAthleteSupport(
            int resourceId,
            string directAthleteSupportId,
            string yearId,
            string supportName,
            string description,
            string supportContact,
            string supportEmail,
            decimal? amount,
            string comments)
        {
            int changes = 0;

            var returnValue = this._repository.uspAddResourceDirectAthleteSupport(
                resourceId,
                directAthleteSupportId,
                yearId,
                supportName,
                description,
                supportContact,
                supportEmail,
                amount,
                comments).SingleOrDefault();

            changes = returnValue == null ? changes : (int)returnValue;

            return changes;
        }

        public int UpdateResourceDirectAthleteSupport(
            int resourceDirectAthleteSupportId,
            int? resourceId = null,
            string directAthleteSupportId = Constant.UndefinedString,
            string yearId = Constant.UndefinedString,
            string supportName = Constant.UndefinedString,
            string description = Constant.UndefinedString,
            string supportContact = Constant.UndefinedString,
            string supportEmail = Constant.UndefinedString,
            decimal? amount = null,
            string comments = Constant.UndefinedString)
        {
            int changes = 0;

            var support = (from s in this._repository.ResourceDirectAthleteSupports
                                where s.ResourceDirectAthleteSupportID == resourceDirectAthleteSupportId
                                select s).First();

            support.ResourceID = resourceId ?? support.ResourceID;
            support.DirectAthleteSupportID = directAthleteSupportId == Constant.UndefinedString ? support.DirectAthleteSupportID : directAthleteSupportId;
            support.YearID = yearId == Constant.UndefinedString ? support.YearID : yearId;
            support.SupportName = supportName == Constant.UndefinedString ? support.SupportName : supportName;
            support.Description = description == Constant.UndefinedString ? support.Description : description;
            support.SupportContact = supportContact == Constant.UndefinedString ? support.SupportContact : supportContact;
            support.SupportEmail = supportEmail == Constant.UndefinedString ? support.SupportEmail : supportEmail;
            support.Amount = amount;
            support.Comments = comments == Constant.UndefinedString ? support.Comments : comments;

            //Update Resource Direct Athlete Support
            var updateDASReturnValue = this._repository.uspUpdateResourceDirectAthleteSupport(
                support.ResourceDirectAthleteSupportID,
                support.ResourceID,
                support.DirectAthleteSupportID,
                support.YearID,
                support.SupportName,
                support.Description,
                support.SupportContact,
                support.SupportEmail,
                support.Amount,
                support.Comments).SingleOrDefault();

            changes = updateDASReturnValue == null ? changes : changes + (int)updateDASReturnValue;

            return changes;
        }

        public int GetResourceIdByDirectAthleteSupport(int resourceDirectAthleteSupportId)
        {
            return (from d in this._repository.ResourceDirectAthleteSupports
                       where d.ResourceDirectAthleteSupportID == resourceDirectAthleteSupportId
                       select d.ResourceID).FirstOrDefault();
        }

        public int GetResourceIdByAthleteAffiliate(int resourceAthletesAffiliateId)
        {
            return (from d in this._repository.ResourceAffiliates
                    where d.ResourceAffiliateID == resourceAthletesAffiliateId
                    select d.ResourceID).FirstOrDefault();
        }

        public int GetResourceIdByResourceSport(int resourceSportId)
        {
            return (from d in this._repository.ResourceSports
                    where d.ResourceSportID == resourceSportId
                    select d.ResourceID).FirstOrDefault();
        }

        public int GetResourceIdByResourceQualification(int resourceQualificationId)
        {
            return (from d in this._repository.ResourceQualifications
                    where d.ResourceQualificationID == resourceQualificationId
                    select d.ResourceID).FirstOrDefault();
        }

        public int AddBenchmarkResource(
 	        int resourceSportId,
	        int benchmarkTypeId,
	        int benchmarkTierId,
	        string yearId,
	        int? nsoValue,
	        int? otpValue,
	        string comments,
	        bool active)
        {
            int changes = 0;

            var returnValue = this._repository.uspAddBenchmarkResource(
                resourceSportId,
                benchmarkTypeId,
                benchmarkTierId,
                yearId,
                nsoValue,
                otpValue,
                comments,
                active).SingleOrDefault();

            changes = returnValue == null ? changes : (int)returnValue;

            return changes;
        }

        public int UpdateBenchmarkResource(
            int benchmarkResourceId,
            int? resourceSportId = null,
            int? benchmarkTypeId = null,
            int? benchmarkTierId = null,
            string yearId = Constant.UndefinedString,
            int? nsoValue = null,
            int? otpValue = null,
            string comments = Constant.UndefinedString,
            bool? active = null)
        {
            int changes = 0;

            var benchmark = (from b in this._repository.BenchmarkResources
                                where b.BenchmarkResourceID == benchmarkResourceId
                                && b.Active
                                select b).First();

            benchmark.ResourceSportID = resourceSportId ?? benchmark.ResourceSportID;
            benchmark.BenchmarkTypeID = benchmarkTypeId ?? benchmark.BenchmarkTypeID;
            benchmark.BenchmarkTierID = benchmarkTierId ?? benchmark.BenchmarkTierID;
            benchmark.YearID = yearId == Constant.UndefinedString ? benchmark.YearID : yearId;
            benchmark.NSOValue = nsoValue ?? benchmark.NSOValue;
            benchmark.OTPValue = otpValue ?? benchmark.OTPValue;
            benchmark.Comments = comments == Constant.UndefinedString ? benchmark.Comments : comments;
            benchmark.Active = active ?? benchmark.Active;

            var returnValue = this._repository.uspUpdateBenchmarkResource(
                benchmark.BenchmarkResourceID,
                benchmark.ResourceSportID,
                benchmark.BenchmarkTypeID,
                benchmark.BenchmarkTierID,
                benchmark.YearID,
                benchmark.NSOValue,
                benchmark.OTPValue,
                benchmark.Comments,
                benchmark.Active).SingleOrDefault();

            changes = returnValue == null ? changes : changes + (int)returnValue;

            return changes;
        }

        public int AddResourceSport(
	       int resourceId,
	       string sportId,
	       string yearId,
	       string resourceClassId,
	       string comments,
           string sportTrackingRef,
           int?  coachResourceId,
           bool? istCrossCompetency,
           bool? istPrimary)
        {
            int changes = 0;

            var returnValue = this._repository.uspAddResourceSport(
                resourceId,
                sportId,
                yearId,
                resourceClassId,
                comments,
                sportTrackingRef,
                coachResourceId,
                istCrossCompetency,
                istPrimary).SingleOrDefault();

            changes = returnValue == null ? changes : (int)returnValue;

            return changes;
        }

        public int UpdateResourceSport(
            int resourceSportId,
            int? resourceId = null,
            string sportId = Constant.UndefinedString,
            string yearId = Constant.UndefinedString,
            string resourceClassId = Constant.UndefinedString,
            string comment = Constant.UndefinedString,
            string sportTrackingRef = Constant.UndefinedString,
            int? coachResourceId = null,
            bool? istCrossCompetency = null,
            bool? istPrimary = null)
        {
            int changes = 0;

            var sport = (from s in this._repository.ResourceSports
                            where s.ResourceSportID == resourceSportId
                            select s).First();

            sport.ResourceID = resourceId ?? sport.ResourceID;
            sport.SportID = sportId == Constant.UndefinedString ? sport.SportID : sportId;
            sport.YearID = yearId == Constant.UndefinedString ? sport.YearID : yearId;
            sport.ResourceClassID = resourceClassId == Constant.UndefinedString ? sport.ResourceClassID : resourceClassId;
            sport.Comments = comment == Constant.UndefinedString ? sport.Comments : comment;
            sport.SportTrackingRef = sportTrackingRef == Constant.UndefinedString ? sport.SportTrackingRef : sportTrackingRef;
            sport.CoachResourceID = coachResourceId;
            sport.ISTCrossCompetency = istCrossCompetency;
            sport.ISTPrimary = istPrimary;

            var returnValue = this._repository.uspUpdateResourceSport(
                sport.ResourceSportID,
                sport.ResourceID,
                sport.SportID,
                sport.YearID,
                sport.ResourceClassID,
                sport.Comments,
                sport.SportTrackingRef,
                sport.CoachResourceID,
                sport.ISTCrossCompetency,
                sport.ISTPrimary).SingleOrDefault();

            changes = returnValue == null ? changes : changes + (int)returnValue;

            return changes;
        }

        public int SavePersonalCoach(int athleteId, int? coachId, string yearId)
        {
            int changes = 0;

            var resources = (from r in this._repository.ResourceSports
                             where r.ResourceID == athleteId && r.SportID == Constant.SportId.All 
                             select r).ToList();

            if (resources != null && resources.Count > 0)
            {
                var resource = resources.First();

                if (coachId.HasValue)
                {
                    var returnValue = this._repository.uspUpdateResourceSport(
                        resource.ResourceSportID,
                        resource.ResourceID,
                        resource.SportID,
                        yearId,
                        null,
                        null,
                        null,
                        coachId,
                        null,
                        null).SingleOrDefault();
                    changes = returnValue == null ? changes : (int)returnValue;
                }
                else
                {
                    var returnValue = this._repository.uspDeleteResourceSport(resource.ResourceSportID).SingleOrDefault();
                    changes = returnValue == null ? changes : (int)returnValue;
                }
            }
            else
            {
                if (coachId.HasValue)
                {
                    var returnValue = this._repository.uspAddResourceSport(
                        athleteId,
                        Constant.SportId.All,
                        yearId,
                        null,
                        null,
                        null,
                        coachId,
                        null,
                        null).SingleOrDefault();
                    changes = returnValue == null ? changes : (int)returnValue;
                }
            }

            return changes;
        }

        public int AddResourceQualification(
	        int resourceId,
	        string qualificationTypeId,
	        string description,
	        bool qualified,
	        string comments)
        {
            int changes = 0;

            var returnValue = this._repository.uspAddResourceQualification(
                resourceId,
                qualificationTypeId,
                description,
                qualified,
                comments).SingleOrDefault();

            changes = returnValue == null ? changes : (int)returnValue;

            return changes;
        }

        public int UpdateResourceQualification(
            int resourceQualificationId,
            int? resourceId = null,
            string qualificationTypeId = Constant.UndefinedString,
            string description = Constant.UndefinedString,
            bool? qualified = null,
            string comment = Constant.UndefinedString)
        {
            int changes = 0;

            var qualification = (from q in this._repository.ResourceQualifications
                                    where q.ResourceQualificationID == resourceQualificationId
                                    select q).First();

            qualification.ResourceID = resourceId ?? qualification.ResourceID;
            qualification.QualificationTypeID = qualificationTypeId == Constant.UndefinedString ? qualification.QualificationTypeID : qualificationTypeId;
            qualification.Description = description == Constant.UndefinedString ? qualification.Description : description;
            qualification.Qualified = qualified ?? qualification.Qualified;
            qualification.Comments = comment == Constant.UndefinedString ? qualification.Comments : comment;

            var returnValue = this._repository.uspUpdateResourceQualification(
                qualification.ResourceQualificationID,
                qualification.ResourceID,
                qualification.QualificationTypeID,
                qualification.Description,
                qualification.Qualified,
                qualification.Comments).SingleOrDefault();

            changes = returnValue == null ? changes : changes + (int)returnValue;

            return changes;
        }

        public MaintenanceAthletesGeneralInfoViewModel GetMaintenanceAthletesGeneralInfoViewModel(int resourceId)
        {
            MaintenanceAthletesGeneralInfoViewModel model = null;

            var resource = (from r in this._repository.Resources
                            where r.ResourceID == resourceId
                            select r).SingleOrDefault();

            if (resource != null)
            {
                model = new MaintenanceAthletesGeneralInfoViewModel(resource);

                //SportID == Constant.SportId.All in ResourceSports is used as Athlete personal coach
                model.PersonalCoachId = (from s in this._repository.ResourceSports where s.ResourceID == model.ResourceId && s.SportID == Constant.SportId.All select s.CoachResourceID).FirstOrDefault();

                model.Countries = (from c in this._repository.Countries
                                    select new ListItem
                                    {
                                        Id = c.CountryID,
                                        Description = _frenchLanguage ? c.Name_FR : c.Name_EN
                                    }).ToList();

                model.CSCs = new List<ListItem> { null };
                model.CSCs.AddRange((from o in this._repository.Organizations
                                where o.OrganizationTypeID == Constant.OrganizationTypeId.CSC
                                select new ListItem
                                {
                                    Id = o.OrganizationID,
                                    Description = _frenchLanguage ? o.Name_FR : o.Name_EN
                                }).ToList());

                model.Genders = this._decodeBL.GetHumanGenders(true);

                var resources = (from r in this._repository.Resources
                                 join s in this._repository.ResourceSpecialties on r.ResourceSpecialtyID equals s.ResourceSpecialtyID
                                 where s.CoachIndicator
                                 select r).ToList();
                model.CoachResources = new List<ListItem> { null };
                model.CoachResources.AddRange((from r in resources
                                               select new ListItem 
                                               {
                                                Id = r.ResourceID.ToString(),
                                                Description = r.FirstName + " " + r.LastName + " - " + r.ResourceID.ToString()
                                               }).ToList());
            }

            return model;
        }

        public MaintenanceAthletesContactInfoViewModel GetMaintenanceAthletesContactInfoViewModel(int resourceId)
        {
            MaintenanceAthletesContactInfoViewModel model = null;

            var resource = (from r in this._repository.Resources
                            where r.ResourceID == resourceId
                            && r.Active
                            select r).SingleOrDefault();

            if (resource != null)
            {
                model = new MaintenanceAthletesContactInfoViewModel(resource);

                model.Countries = new List<ListItem> { null };
                model.Countries.AddRange((from c in this._repository.Countries
                                    select new ListItem
                                    {
                                        Id = c.CountryID,
                                        Description = _frenchLanguage ? c.Name_FR : c.Name_EN
                                    }).ToList());

                model.Provinces = new List<ListItem> { null };
                model.Provinces.AddRange((from p in this._repository.Provinces
                                    select new ListItem
                                    {
                                        Id = p.ProvinceID,
                                        Description = _frenchLanguage ? p.Name_FR : p.Name_EN
                                    }).ToList());
            }

            return model;
        }

        public List<MaintenanceAthletesAthleteGridViewModel> GetMaintenanceAthletesAthleteGridViewModel(string selectedSportId, string yearId, GridCommand command, out int total)
        {
            total = 0;

            if (string.IsNullOrEmpty(selectedSportId))
            {
                selectedSportId = Constant.SportId.All;
            }

            //NOTE: Using "ResourceSports.SportID.StartsWith" to determine sport parent/child relationship is not reliable.
            selectedSportId = Parse3rdLevelSportId(selectedSportId);

            var modelQuery = from r in this._repository.Resources
                             where r.ResourceTypeID == Constant.ResourceType.Athletes
                             && (selectedSportId == Constant.SportId.All ||
                             (from s in r.ResourceSports
                              where s.SportID.StartsWith(selectedSportId)
                              select s).Any()) // Only Athletes that have sports under the selected sport id
                             && r.Active
                             select new MaintenanceAthletesAthleteGridViewModel
                             {
                                 GenderId = r.Gender,
                                 GenderName = (from g in this._repository.Decodes
                                               where g.DecodeCategoryID == Constant.DecodeCategoryId.Gender
                                               && g.DecodeID == r.Gender
                                               select _frenchLanguage ? g.DecodeID_FR : g.DecodeID_EN).FirstOrDefault(),
                                 FirstName = r.FirstName,
                                 LastName = r.LastName,
                                 ResourceId = r.ResourceID,
                                 ResourceSpecialtyId = r.ResourceSpecialty.ResourceSpecialtyID,
                                 CountryId = r.CountryID,
                                 CountryName = _frenchLanguage ? r.Country.Name_FR : r.Country.Name_EN,
                                 Pooled = r.Pooled,
                                 TBD = r.TBD,
                                 IsNew = r.New,
                                 ResourceSpecialtyName = _frenchLanguage ? r.ResourceSpecialty.Name_FR : r.ResourceSpecialty.Name_EN,
                                 BenchmarksEntered = (from s in r.ResourceSports
                                                      where selectedSportId == Constant.SportId.All
                                                      || s.SportID.StartsWith(selectedSportId)
                                                      from b in s.BenchmarkResources
                                                      where b.Active
                                                      && (yearId == null || b.YearID == yearId)
                                                      select b).Any(),
                                 Category = (from s in r.ResourceSports
                                             where (selectedSportId == Constant.SportId.All ||
                                             s.SportID.StartsWith(selectedSportId))
                                             && s.ResourceClass != null
                                             && (yearId == null || s.YearID == yearId)
                                             orderby s.ResourceClass.SortOrder
                                             select _frenchLanguage ? s.ResourceClass.Name_FR : s.ResourceClass.Name_EN).FirstOrDefault()
                             };

            //Apply filtering from the UI
            if (command.FilterDescriptors.Any())
            {
                modelQuery = FilterAthletes(modelQuery, command.FilterDescriptors);
            }

            //Default sorting
            if (command.SortDescriptors.Count == 0)
            {
                modelQuery = modelQuery.OrderBy(x => x.LastName).ThenBy(x => x.FirstName);
            }

            // Apply sorting from the UI
            foreach (SortDescriptor sortDescriptor in command.SortDescriptors)
            {
                if (sortDescriptor.SortDirection == ListSortDirection.Ascending)
                {
                    switch (sortDescriptor.Member)
                    {
                        case "ResourceId":
                            modelQuery = modelQuery.OrderBy(x => x.ResourceId);
                            break;
                        case "LastName":
                            modelQuery = modelQuery.OrderBy(x => x.LastName);
                            break;
                        case "FirstName":
                            modelQuery = modelQuery.OrderBy(x => x.FirstName);
                            break;
                        case "CountryId":
                            modelQuery = modelQuery.OrderBy(x => x.CountryName);
                            break;
                        case "GenderId":
                            modelQuery = modelQuery.OrderBy(x => x.GenderName);
                            break;
                        case "IsNew":
                            modelQuery = modelQuery.OrderBy(x => x.IsNew);
                            break;
                        case "BenchmarksEntered":
                            modelQuery = modelQuery.OrderBy(x => x.BenchmarksEntered);
                            break;
                        case "Category":
                            modelQuery = modelQuery.OrderBy(x => x.Category);
                            break;
                        case "PersonalCoachId":
                            modelQuery = modelQuery.OrderBy(x => x.PersonalCoachName);
                            break;
                    }
                }
                else
                {
                    switch (sortDescriptor.Member)
                    {
                        case "ResourceId":
                            modelQuery = modelQuery.OrderByDescending(x => x.ResourceId);
                            break;
                        case "LastName":
                            modelQuery = modelQuery.OrderByDescending(x => x.LastName);
                            break;
                        case "FirstName":
                            modelQuery = modelQuery.OrderByDescending(x => x.FirstName);
                            break;
                        case "CountryId":
                            modelQuery = modelQuery.OrderByDescending(x => x.CountryName);
                            break;
                        case "GenderId":
                            modelQuery = modelQuery.OrderByDescending(x => x.GenderName);
                            break;
                        case "IsNew":
                            modelQuery = modelQuery.OrderByDescending(x => x.IsNew);
                            break;
                        case "BenchmarksEntered":
                            modelQuery = modelQuery.OrderByDescending(x => x.BenchmarksEntered);
                            break;
                        case "Category":
                            modelQuery = modelQuery.OrderByDescending(x => x.Category);
                            break;
                        case "PersonalCoachId":
                            modelQuery = modelQuery.OrderByDescending(x => x.PersonalCoachName);
                            break;
                    }
                }
            }

            //Get the count for UI paging
            total = modelQuery.Count();

            //Set the paging size
            if (command.PageSize > 0)
            {
                //Set start index to take records from
                modelQuery = modelQuery.Skip((command.Page - 1) * command.PageSize);
            }

            //Return only the records needed to fit on the current page
            modelQuery = modelQuery.Take(command.PageSize);

            //Now set the model with the query elements
            var model = modelQuery.ToList();

            //SportID == Constant.SportId.All in ResourceSports is used as Athlete personal coach
            foreach (var item in model)
            {
                item.PersonalCoachId = (from s in this._repository.ResourceSports where s.ResourceID == item.ResourceId && s.SportID == Constant.SportId.All select s.CoachResourceID).FirstOrDefault();

                if (item.PersonalCoachId.HasValue)
                {
                    var coach = (from r in this._repository.Resources
                                 where r.ResourceID == item.PersonalCoachId
                                 select new { firstname = r.FirstName, lastname = r.LastName, resourceid = r.ResourceID }).FirstOrDefault();

                    if (coach != null)
                    {
                        item.PersonalCoachName = string.Format("{0} {1} - {2}", coach.firstname, coach.lastname, coach.resourceid);
                    }
                }
            }

            return model;
        }

        public List<MaintenanceAthletesSportsInfoViewModel> GetMaintenanceAthletesSportsInfoViewModel(int resourceId, string yearId)
        {
            List<MaintenanceAthletesSportsInfoViewModel> model = null;

            var resource = (from r in this._repository.Resources
                            where r.ResourceID == resourceId
                            && r.Active
                            select r).SingleOrDefault();

            if (resource != null)
            {
                model = new List<MaintenanceAthletesSportsInfoViewModel>();

                //Constant.SportId.All is used as Athlete personal coach
                var sports = (from s in resource.ResourceSports
                              where s.SportID != Constant.SportId.All
                              && s.YearID == yearId
                              select s).ToList();

                foreach (var sport in sports)
                {
                    var resourceSport = new MaintenanceAthletesSportsInfoViewModel();

                    resourceSport.ResourceId = sport.ResourceID;
                    resourceSport.ResourceSportId = sport.ResourceSportID;
                    resourceSport.ResourceClassId = sport.ResourceClassID;

                    if (sport.ResourceClass != null)
                    {
                        resourceSport.ResourceClassName = _frenchLanguage ? sport.ResourceClass.Name_FR : sport.ResourceClass.Name_EN;
                    }

                    resourceSport.SportsId = sport.Sport.ParentSport.ParentSportID;
                    resourceSport.SportName = _frenchLanguage ? sport.Sport.ParentSport.ParentSport.Name_FR : sport.Sport.ParentSport.ParentSport.Name_EN;
                    resourceSport.DisciplineId = sport.Sport.ParentSportID;
                    resourceSport.DisciplineName = _frenchLanguage ? sport.Sport.ParentSport.Name_FR : sport.Sport.ParentSport.Name_EN;
                    resourceSport.EventId = sport.SportID;
                    resourceSport.EventName = _frenchLanguage ? sport.Sport.Name_FR : sport.Sport.Name_EN;
                    resourceSport.Benchmark = (from b in sport.BenchmarkResources
                                                where b.Active
                                                && b.YearID == yearId
                                                select b).Any();
                    resourceSport.YearId = sport.YearID;
                    resourceSport.HasComments = !string.IsNullOrEmpty(sport.Comments);
                    resourceSport.SportTrackingRef = sport.SportTrackingRef;

                    if (sport.CoachResourceID.HasValue)
                    {
                        resourceSport.EventCoachId = sport.CoachResourceID;

                        var coach = (from r in this._repository.Resources
                                     where r.ResourceID == resourceSport.EventCoachId
                                     select new { firstname = r.FirstName, lastname = r.LastName, resourceid = r.ResourceID }).FirstOrDefault();

                        if (coach != null)
                        {
                            resourceSport.EventCoachName = string.Format("{0} {1} - {2}", coach.firstname, coach.lastname, coach.resourceid);
                        }
                    }

                    model.Add(resourceSport);
                }
            }

            return model;
        }

        public List<MaintenanceAthletesDirectAthleteSupportViewModel> GetMaintenanceAthletesDirectAthleteSupportViewModel(int resourceId)
        {
            List<MaintenanceAthletesDirectAthleteSupportViewModel> model = null;

            var resource = (from r in this._repository.Resources
                            where r.ResourceID == resourceId
                            && r.Active
                            select r).SingleOrDefault();

            if (resource != null)
            {
                model = new List<MaintenanceAthletesDirectAthleteSupportViewModel>();

                foreach (var support in resource.ResourceDirectAthleteSupports)
                {
                    var resourceSupport = new MaintenanceAthletesDirectAthleteSupportViewModel();

                    resourceSupport.Amount = support.Amount;
                    resourceSupport.Amount = resourceSupport.Amount ?? 0m;
                    resourceSupport.HasComments = !string.IsNullOrEmpty(support.Comments);
                    resourceSupport.Description = string.IsNullOrEmpty(support.Description) ? string.Empty : support.Description;
                    resourceSupport.DirectAthleteSupportCode = support.DirectAthleteSupportID;
                    resourceSupport.DirectAthleteSupportName = _frenchLanguage ? support.DirectAthleteSupport.Name_FR : support.DirectAthleteSupport.Name_EN;
                    resourceSupport.DirectAthleteSupportTypeId = support.DirectAthleteSupport.DirectAthleteSupportTypeID;
                    resourceSupport.DirectAthleteSupportTypeName = _frenchLanguage ? support.DirectAthleteSupport.DirectAthleteSupportType.Name_FR : support.DirectAthleteSupport.DirectAthleteSupportType.Name_EN;
                    resourceSupport.ResourceDirectAthleteSupportId = support.ResourceDirectAthleteSupportID;
                    resourceSupport.ResourceId = support.ResourceID;
                    resourceSupport.SupportContact = string.IsNullOrEmpty(support.SupportContact) ? string.Empty : support.SupportContact;
                    resourceSupport.SupportEmail = string.IsNullOrEmpty(support.SupportEmail) ? string.Empty : support.SupportEmail;
                    resourceSupport.SupportName = support.SupportName;
                    resourceSupport.YearId = support.YearID;

                    model.Add(resourceSupport);
                }
            }

            return model;
        }

        public List<MaintenanceAthletesAffiliatesInfoViewModel> GetMaintenanceAthletesAffiliatesInfoViewModel(int resourceId)
        {
            List<MaintenanceAthletesAffiliatesInfoViewModel> model = null;

            var resource = (from r in this._repository.Resources
                            where r.ResourceID == resourceId
                            && r.Active
                            select r).SingleOrDefault();

            if (resource != null)
            {
                model = new List<MaintenanceAthletesAffiliatesInfoViewModel>();

                foreach (var affiliate in resource.ResourceAffiliates)
                {
                    var resourceAffiliate = new MaintenanceAthletesAffiliatesInfoViewModel();

                    resourceAffiliate.AffiliateContact = string.IsNullOrEmpty(affiliate.AffiliateContact) ? string.Empty : affiliate.AffiliateContact;
                    resourceAffiliate.AffiliateEmail = string.IsNullOrEmpty(affiliate.AffiliateEmail) ? string.Empty : affiliate.AffiliateEmail;
                    resourceAffiliate.AffiliateName = affiliate.AffiliateName;
                    resourceAffiliate.AffiliateTypeId = affiliate.AffiliateTypeID;
                    resourceAffiliate.AffiliateTypeName = _frenchLanguage ? affiliate.AffiliateType.Name_FR : affiliate.AffiliateType.Name_EN;
                    resourceAffiliate.HasComments = !string.IsNullOrEmpty(affiliate.Comments);
                    resourceAffiliate.Description = string.IsNullOrEmpty(affiliate.Description) ? string.Empty : affiliate.Description;
                    resourceAffiliate.ResourceId = affiliate.ResourceID;
                    resourceAffiliate.YearFromId = affiliate.YearFromID;
                    resourceAffiliate.YearToId = affiliate.YearToID;
                    resourceAffiliate.ResourceAffiliateId = affiliate.ResourceAffiliateID;

                    model.Add(resourceAffiliate);
                }
            }

            return model;
        }

        public List<MaintenanceNSOMembersGridViewModel> GetMaintenanceNSOMembersGridViewModel(string selectedSportId, GridCommand command, out int total)
        {
            total = 0;

            if (string.IsNullOrEmpty(selectedSportId))
            {
                selectedSportId = Constant.SportId.All;
            }

            var modelQuery = from r in this._repository.Resources
                             where r.ResourceTypeID == Constant.ResourceType.NSOMembers
                             && (selectedSportId == Constant.SportId.All ||
                             (r.ResourceSports.Any(s => s.Sport.SportLevelID == Constant.SportLevelId.Sport && s.SportID == selectedSportId)
                                || r.ResourceSports.Any(s => s.Sport.SportLevelID == Constant.SportLevelId.Discipline && s.Sport.ParentSport.SportID == selectedSportId)
                                || r.ResourceSports.Any(s => s.Sport.SportLevelID == Constant.SportLevelId.Event && s.Sport.ParentSport.ParentSport.SportID == selectedSportId)
                             )) // Only NSO Members that have sports under the selected sport id
                             && r.Active
                             select new MaintenanceNSOMembersGridViewModel
                             {
                                 GenderId = r.Gender,
                                 GenderName = (from g in this._repository.Decodes
                                               where g.DecodeCategoryID == Constant.DecodeCategoryId.Gender
                                               && g.DecodeID == r.Gender
                                               select _frenchLanguage ? g.DecodeID_FR : g.DecodeID_EN).FirstOrDefault(),
                                 FirstName = r.FirstName,
                                 LastName = r.LastName,
                                 ResourceId = r.ResourceID,
                                 ResourceSpecialtyId = r.ResourceSpecialty.ResourceSpecialtyID,
                                 CountryId = r.CountryID,
                                 CountryName = _frenchLanguage ? r.Country.Name_FR : r.Country.Name_EN,
                                 Pooled = r.Pooled,
                                 TBD = r.TBD,
                                 ResourceSpecialtyName = _frenchLanguage ? r.ResourceSpecialty.Name_FR : r.ResourceSpecialty.Name_EN
                             };

            //Apply filtering from the UI
            if (command.FilterDescriptors.Any())
            {
                modelQuery = FilterNSOMembers(modelQuery, command.FilterDescriptors);
            }

            //Default sorting
            if (command.SortDescriptors.Count == 0)
            {
                modelQuery = modelQuery.OrderBy(x => x.LastName).ThenBy(x => x.FirstName);
            }

            // Apply sorting from the UI
            foreach (SortDescriptor sortDescriptor in command.SortDescriptors)
            {
                if (sortDescriptor.SortDirection == ListSortDirection.Ascending)
                {
                    switch (sortDescriptor.Member)
                    {
                        case "ResourceId":
                            modelQuery = modelQuery.OrderBy(x => x.ResourceId);
                            break;
                        case "LastName":
                            modelQuery = modelQuery.OrderBy(x => x.LastName);
                            break;
                        case "FirstName":
                            modelQuery = modelQuery.OrderBy(x => x.FirstName);
                            break;
                        case "CountryId":
                            modelQuery = modelQuery.OrderBy(x => x.CountryName);
                            break;
                        case "Pooled":
                            modelQuery = modelQuery.OrderBy(x => x.Pooled);
                            break;
                        case "TBD":
                            modelQuery = modelQuery.OrderBy(x => x.TBD);
                            break;
                        case "GenderId":
                            modelQuery = modelQuery.OrderBy(x => x.GenderName);
                            break;
                        case "ResourceSpecialtyId":
                            modelQuery = modelQuery.OrderBy(x => x.ResourceSpecialtyName);
                            break;
                    }
                }
                else
                {
                    switch (sortDescriptor.Member)
                    {
                        case "ResourceId":
                            modelQuery = modelQuery.OrderByDescending(x => x.ResourceId);
                            break;
                        case "LastName":
                            modelQuery = modelQuery.OrderByDescending(x => x.LastName);
                            break;
                        case "FirstName":
                            modelQuery = modelQuery.OrderByDescending(x => x.FirstName);
                            break;
                        case "CountryId":
                            modelQuery = modelQuery.OrderByDescending(x => x.CountryName);
                            break;
                        case "Pooled":
                            modelQuery = modelQuery.OrderByDescending(x => x.Pooled);
                            break;
                        case "TBD":
                            modelQuery = modelQuery.OrderByDescending(x => x.TBD);
                            break;
                        case "GenderId":
                            modelQuery = modelQuery.OrderBy(x => x.GenderName);
                            break;
                        case "ResourceSpecialtyId":
                            modelQuery = modelQuery.OrderByDescending(x => x.ResourceSpecialtyName);
                            break;
                    }
                }
            }

            //Get the count for UI paging
            total = modelQuery.Count();

            //Set the paging size
            if (command.PageSize > 0)
            {
                //Set start index to take records from
                modelQuery = modelQuery.Skip((command.Page - 1) * command.PageSize);
            }

            //Return only the records needed to fit on the current page
            modelQuery = modelQuery.Take(command.PageSize);

            //Now set the model with the query elements
            var model = modelQuery.ToList();

            return model;
        }

        public MaintenanceNSOMembersGeneralInfoViewModel GetMaintenanceNSOMembersGeneralInfoViewModel(int resourceId)
        {
            MaintenanceNSOMembersGeneralInfoViewModel model = null;

            var resource = (from r in this._repository.Resources
                            where r.ResourceID == resourceId
                            select r).SingleOrDefault();

            if (resource != null)
            {
                model = new MaintenanceNSOMembersGeneralInfoViewModel(resource);

                model.Countries = (from c in this._repository.Countries
                                   select new ListItem
                                   {
                                       Id = c.CountryID,
                                       Description = _frenchLanguage ? c.Name_FR : c.Name_EN
                                   }).ToList();

                model.CSCs = new List<ListItem> { null };
                model.CSCs.AddRange((from o in this._repository.Organizations
                                     where o.OrganizationTypeID == Constant.OrganizationTypeId.CSC
                                     select new ListItem
                                     {
                                         Id = o.OrganizationID,
                                         Description = _frenchLanguage ? o.Name_FR : o.Name_EN
                                     }).ToList());

                model.Genders = this._decodeBL.GetHumanGenders(true);

                model.Specialties = new List<ListItem> { null };
                model.Specialties.AddRange((from s in this._repository.ResourceSpecialties
                                            where s.ResourceTypeID == Constant.ResourceType.NSOMembers
                                            select new ListItem
                                            {
                                                Id = s.ResourceSpecialtyID,
                                                Description = _frenchLanguage ? s.Name_FR : s.Name_EN
                                            }).OrderBy(s => s.Description).ToList());
            }

            return model;
        }

        public MaintenanceNSOMembersContactInfoViewModel GetMaintenanceNSOMembersContactInfoViewModel(int resourceId)
        {
            MaintenanceNSOMembersContactInfoViewModel model = null;

            var resource = (from r in this._repository.Resources
                            where r.ResourceID == resourceId
                            && r.Active
                            select r).SingleOrDefault();

            if (resource != null)
            {
                model = new MaintenanceNSOMembersContactInfoViewModel(resource);

                model.Countries = new List<ListItem> { null };
                model.Countries.AddRange((from c in this._repository.Countries
                                          select new ListItem
                                          {
                                              Id = c.CountryID,
                                              Description = _frenchLanguage ? c.Name_FR : c.Name_EN
                                          }).ToList());

                model.Provinces = new List<ListItem> { null };
                model.Provinces.AddRange((from p in this._repository.Provinces
                                          select new ListItem
                                          {
                                              Id = p.ProvinceID,
                                              Description = _frenchLanguage ? p.Name_FR : p.Name_EN
                                          }).ToList());
            }

            return model;
        }

        public List<MaintenanceNSOMembersSportsInfoViewModel> GetMaintenanceNSOMembersSportsInfoViewModel(int resourceId)
        {
            List<MaintenanceNSOMembersSportsInfoViewModel> model = null;

            var resource = (from r in this._repository.Resources
                            where r.ResourceID == resourceId
                            && r.Active
                            select r).SingleOrDefault();

            if (resource != null)
            {
                model = new List<MaintenanceNSOMembersSportsInfoViewModel>();

                //Constant.SportId.All is used as Athlete personal coach
                var sports = (from s in resource.ResourceSports where s.SportID != Constant.SportId.All select s).ToList();

                foreach (var sport in sports)
                {
                    var resourceSport = new MaintenanceNSOMembersSportsInfoViewModel();

                    resourceSport.ResourceId = sport.ResourceID;
                    resourceSport.ResourceSportId = sport.ResourceSportID;
                    resourceSport.SportsId = sport.SportID;
                    resourceSport.SportName = SportBL.FormatSportName(sport.Sport, _frenchLanguage);
                    resourceSport.YearId = sport.YearID;
                    resourceSport.HasComments = !string.IsNullOrEmpty(sport.Comments);
                    resourceSport.CrossCompetency = sport.ISTCrossCompetency;
                    resourceSport.Primary = sport.ISTPrimary;

                    model.Add(resourceSport);
                }
            }

            return model;
        }

        public List<MaintenanceISTMembersGridViewModel> GetMaintenanceISTMembersGridViewModel(string selectedSportId, GridCommand command, out int total)
        {
            total = 0;

            if (string.IsNullOrEmpty(selectedSportId))
            {
                selectedSportId = Constant.SportId.All;
            }

            var modelQuery = from r in this._repository.Resources
                             where r.ResourceTypeID == Constant.ResourceType.ISTMembers
                             && (selectedSportId == Constant.SportId.All ||
                             (r.ResourceSports.Any(s => s.Sport.SportLevelID == Constant.SportLevelId.Sport && s.SportID == selectedSportId)
				                || r.ResourceSports.Any(s => s.Sport.SportLevelID == Constant.SportLevelId.Discipline && s.Sport.ParentSport.SportID == selectedSportId)
				                || r.ResourceSports.Any(s => s.Sport.SportLevelID == Constant.SportLevelId.Event && s.Sport.ParentSport.ParentSport.SportID == selectedSportId)
                             )) // Only IST Members that have sports under the selected sport id
                             && r.Active
                             select new MaintenanceISTMembersGridViewModel
                             {
                                 GenderId = r.Gender,
                                 GenderName = (from g in this._repository.Decodes
                                               where g.DecodeCategoryID == Constant.DecodeCategoryId.Gender
                                               && g.DecodeID == r.Gender
                                               select _frenchLanguage ? g.DecodeID_FR : g.DecodeID_EN).FirstOrDefault(),
                                 FirstName = r.FirstName,
                                 LastName = r.LastName,
                                 ResourceId = r.ResourceID,
                                 ResourceSpecialtyId = r.ResourceSpecialty.ResourceSpecialtyID,
                                 CountryId = r.CountryID,
                                 CountryName = _frenchLanguage ? r.Country.Name_FR : r.Country.Name_EN,
                                 Pooled = r.Pooled,
                                 TBD = r.TBD,
                                 ResourceSpecialtyName = _frenchLanguage ? r.ResourceSpecialty.Name_FR : r.ResourceSpecialty.Name_EN,
                                 PrimaryCscId = r.PrimaryCSCID,
                                 PrimaryCscName = _frenchLanguage ? r.Organization.Name_FR : r.Organization.Name_EN
                             };

            //Apply filtering from the UI
            if (command.FilterDescriptors.Any())
            {
                modelQuery = FilterISTMembers(modelQuery, command.FilterDescriptors);
            }

            //Default sorting
            if (command.SortDescriptors.Count == 0)
            {
                modelQuery = modelQuery.OrderBy(x => x.LastName).ThenBy(x => x.FirstName);
            }

            // Apply sorting from the UI
            foreach (SortDescriptor sortDescriptor in command.SortDescriptors)
            {
                if (sortDescriptor.SortDirection == ListSortDirection.Ascending)
                {
                    switch (sortDescriptor.Member)
                    {
                        case "ResourceId":
                            modelQuery = modelQuery.OrderBy(x => x.ResourceId);
                            break;
                        case "LastName":
                            modelQuery = modelQuery.OrderBy(x => x.LastName);
                            break;
                        case "FirstName":
                            modelQuery = modelQuery.OrderBy(x => x.FirstName);
                            break;
                        case "CountryId":
                            modelQuery = modelQuery.OrderBy(x => x.CountryName);
                            break;
                        case "Pooled":
                            modelQuery = modelQuery.OrderBy(x => x.Pooled);
                            break;
                        case "TBD":
                            modelQuery = modelQuery.OrderBy(x => x.TBD);
                            break;
                        case "PrimaryCscId":
                            modelQuery = modelQuery.OrderBy(x => x.PrimaryCscName);
                            break;
                        case "ResourceSpecialtyId":
                            modelQuery = modelQuery.OrderBy(x => x.ResourceSpecialtyName);
                            break;
                    }
                }
                else
                {
                    switch (sortDescriptor.Member)
                    {
                        case "ResourceId":
                            modelQuery = modelQuery.OrderByDescending(x => x.ResourceId);
                            break;
                        case "LastName":
                            modelQuery = modelQuery.OrderByDescending(x => x.LastName);
                            break;
                        case "FirstName":
                            modelQuery = modelQuery.OrderByDescending(x => x.FirstName);
                            break;
                        case "CountryId":
                            modelQuery = modelQuery.OrderByDescending(x => x.CountryName);
                            break;
                        case "Pooled":
                            modelQuery = modelQuery.OrderByDescending(x => x.Pooled);
                            break;
                        case "TBD":
                            modelQuery = modelQuery.OrderByDescending(x => x.TBD);
                            break;
                        case "PrimaryCscId":
                            modelQuery = modelQuery.OrderByDescending(x => x.PrimaryCscName);
                            break;
                        case "ResourceSpecialtyId":
                            modelQuery = modelQuery.OrderByDescending(x => x.ResourceSpecialtyName);
                            break;
                    }
                }
            }

            //Get the count for UI paging
            total = modelQuery.Count();

            //Set the paging size
            if (command.PageSize > 0)
            {
                //Set start index to take records from
                modelQuery = modelQuery.Skip((command.Page - 1) * command.PageSize);
            }

            //Return only the records needed to fit on the current page
            modelQuery = modelQuery.Take(command.PageSize);

            //Now set the model with the query elements
            var model = modelQuery.ToList();

            return model;
        }

        public MaintenanceISTMembersGeneralInfoViewModel GetMaintenanceISTMembersGeneralInfoViewModel(int resourceId)
        {
            MaintenanceISTMembersGeneralInfoViewModel model = null;

            var resource = (from r in this._repository.Resources
                            where r.ResourceID == resourceId
                            select r).SingleOrDefault();

            if (resource != null)
            {
                model = new MaintenanceISTMembersGeneralInfoViewModel(resource);

                model.Countries = (from c in this._repository.Countries
                                   select new ListItem
                                   {
                                       Id = c.CountryID,
                                       Description = _frenchLanguage ? c.Name_FR : c.Name_EN
                                   }).ToList();

                model.CSCs = new List<ListItem> { null };
                model.CSCs.AddRange((from o in this._repository.Organizations
                                     where o.OrganizationTypeID == Constant.OrganizationTypeId.CSC
                                     select new ListItem
                                     {
                                         Id = o.OrganizationID,
                                         Description = _frenchLanguage ? o.Name_FR : o.Name_EN
                                     }).ToList());

                model.Genders = this._decodeBL.GetHumanGenders(true);

                model.Specialties = new List<ListItem> { null };
                model.Specialties.AddRange((from s in this._repository.ResourceSpecialties
                                            where s.ResourceTypeID == Constant.ResourceType.ISTMembers
                                            select new ListItem
                                            {
                                                Id = s.ResourceSpecialtyID,
                                                Description = _frenchLanguage ? s.Name_FR : s.Name_EN
                                            }).OrderBy(s => s.Description).ToList());
            }

            return model;
        }

        public MaintenanceISTMembersContactInfoViewModel GetMaintenanceISTMembersContactInfoViewModel(int resourceId)
        {
            MaintenanceISTMembersContactInfoViewModel model = null;

            var resource = (from r in this._repository.Resources
                            where r.ResourceID == resourceId
                            && r.Active
                            select r).SingleOrDefault();

            if (resource != null)
            {
                model = new MaintenanceISTMembersContactInfoViewModel(resource);

                model.Countries = new List<ListItem> { null };
                model.Countries.AddRange((from c in this._repository.Countries
                                          select new ListItem
                                          {
                                              Id = c.CountryID,
                                              Description = _frenchLanguage ? c.Name_FR : c.Name_EN
                                          }).ToList());

                model.Provinces = new List<ListItem> { null };
                model.Provinces.AddRange((from p in this._repository.Provinces
                                          select new ListItem
                                          {
                                              Id = p.ProvinceID,
                                              Description = _frenchLanguage ? p.Name_FR : p.Name_EN
                                          }).ToList());
            }

            return model;
        }

        public List<MaintenanceISTMembersSportsInfoViewModel> GetMaintenanceISTMembersSportsInfoViewModel(int resourceId)
        {
            List<MaintenanceISTMembersSportsInfoViewModel> model = null;

            var resource = (from r in this._repository.Resources
                            where r.ResourceID == resourceId
                            && r.Active
                            select r).SingleOrDefault();

            if (resource != null)
            {
                model = new List<MaintenanceISTMembersSportsInfoViewModel>();

                //Constant.SportId.All is used as Athlete personal coach
                var sports = (from s in resource.ResourceSports where s.SportID != Constant.SportId.All select s).ToList();

                foreach (var sport in sports)
                {
                    var resourceSport = new MaintenanceISTMembersSportsInfoViewModel();

                    resourceSport.ResourceId = sport.ResourceID;
                    resourceSport.ResourceSportId = sport.ResourceSportID;
                    resourceSport.SportsId = sport.SportID;
                    resourceSport.SportName = SportBL.FormatSportName(sport.Sport, _frenchLanguage);
                    resourceSport.YearId = sport.YearID;
                    resourceSport.HasComments = !string.IsNullOrEmpty(sport.Comments);
                    resourceSport.CrossCompetency = sport.ISTCrossCompetency;
                    resourceSport.Primary = sport.ISTPrimary;

                    model.Add(resourceSport);
                }
            }

            return model;
        }

        public List<MaintenanceNSOMembersQualificationInfoViewModel> GetMaintenanceNSOMembersQualificationInfoViewModel(int resourceId)
        {
            List<MaintenanceNSOMembersQualificationInfoViewModel> model = null;

            var resource = (from r in this._repository.Resources
                            where r.ResourceID == resourceId
                            && r.Active
                            select r).SingleOrDefault();

            if (resource != null)
            {
                model = new List<MaintenanceNSOMembersQualificationInfoViewModel>();

                foreach (var qualification in resource.ResourceQualifications)
                {
                    var resourceQualification = new MaintenanceNSOMembersQualificationInfoViewModel();

                    resourceQualification.ResourceId = qualification.ResourceID;
                    resourceQualification.ResourceQualificationId = qualification.ResourceQualificationID;
                    resourceQualification.QualificationTypeId = qualification.QualificationTypeID;
                    resourceQualification.QualificationTypeName = _frenchLanguage ? qualification.QualificationType.Name_FR : qualification.QualificationType.Name_EN;
                    resourceQualification.Qualified = qualification.Qualified;
                    resourceQualification.HasComments = !string.IsNullOrEmpty(qualification.Comments);
                    resourceQualification.Description = qualification.Description;

                    model.Add(resourceQualification);
                }
            }

            return model;
        }

        public List<MaintenanceISTMembersQualificationInfoViewModel> GetMaintenanceISTMembersQualificationInfoViewModel(int resourceId)
        {
            List<MaintenanceISTMembersQualificationInfoViewModel> model = null;

            var resource = (from r in this._repository.Resources
                            where r.ResourceID == resourceId
                            && r.Active
                            select r).SingleOrDefault();

            if (resource != null)
            {
                model = new List<MaintenanceISTMembersQualificationInfoViewModel>();

                foreach (var qualification in resource.ResourceQualifications)
                {
                    var resourceQualification = new MaintenanceISTMembersQualificationInfoViewModel();

                    resourceQualification.ResourceId = qualification.ResourceID;
                    resourceQualification.ResourceQualificationId = qualification.ResourceQualificationID;
                    resourceQualification.QualificationTypeId = qualification.QualificationTypeID;
                    resourceQualification.QualificationTypeName = _frenchLanguage ? qualification.QualificationType.Name_FR : qualification.QualificationType.Name_EN;
                    resourceQualification.Qualified = qualification.Qualified;
                    resourceQualification.HasComments = !string.IsNullOrEmpty(qualification.Comments);
                    resourceQualification.Description = qualification.Description;

                    model.Add(resourceQualification);
                }
            }

            return model;
        }

        public void PopulateMaintenanceResourcesViewData(ViewDataDictionary viewData, string resourceId, string selectedSportId)
        {
            var id = 0;

            if (!string.IsNullOrEmpty(resourceId))
            {
                id = int.Parse(resourceId);
            }

            viewData["genders"] = this._decodeBL.GetHumanGenders(true);

            var countries = from c in this._repository.Countries
                            select new ListItem
                            {
                                Id = c.CountryID,
                                Description = _frenchLanguage ? c.Name_FR : c.Name_EN
                            };

            viewData["countries"] = countries.OrderBy(c => c.Description).ToList();

            viewData["resourceId"] = resourceId;

            if (id == 0)
            {
                viewData["resourceName"] = "Select a resource.";
            }
            else
            {
                viewData["resourceName"] = (from r in this._repository.Resources
                                            where r.ResourceID == id
                                            && r.Active
                                            select r.FirstName + " " + r.LastName).SingleOrDefault();
            }

            viewData["sportName"] = (from s in this._repository.Sports
                                        where s.SportID == selectedSportId
                                        && s.active
                                        select _frenchLanguage ? s.Name_FR : s.Name_EN).SingleOrDefault();

            var selectedSportLevel = (from s in this._repository.Sports
                                      where s.SportID == selectedSportId
                                      select s.SportLevelID).SingleOrDefault();

            if (selectedSportLevel == Constant.SportLevelId.Sport)
            {
                viewData["selectedSport"] = selectedSportId;
            }
            else if (selectedSportLevel == Constant.SportLevelId.Season)
            {
                viewData["selectedSport"] = (from s in this._repository.Sports
                                             where s.SportID == selectedSportId
                                             from c in s.ChildSports
                                             where c.active
                                             orderby c.Name_EN
                                             select c.SportID).FirstOrDefault();
            }
            else if (selectedSportLevel == Constant.SportLevelId.Olympic)
            {
                viewData["selectedSport"] = (from s in this._repository.Sports
                                             where s.SportID == selectedSportId
                                             from c in s.ChildSports
                                             where c.active
                                             from c2 in c.ChildSports
                                             where c2.active
                                             orderby c2.Name_EN
                                             select c2.SportID).FirstOrDefault();
            }
            else if (selectedSportLevel == Constant.SportLevelId.All)
            {
                viewData["selectedSport"] = (from s in this._repository.Sports
                                             where s.SportLevelID == Constant.SportLevelId.Sport
                                             && s.active
                                             orderby s.Name_EN
                                             select s.SportID).FirstOrDefault();
            }

            viewData["years"] = (from y in this._repository.Years
                                    where y.active == null || (bool)y.active
                                    orderby y.YearID
                                    select new ListItem
                                    {
                                        Id = y.YearID,
                                        Description = y.YearID
                                    }).ToList();

            viewData["affiliate_types"] = (from t in this._repository.AffiliateTypes
                                            select new ListItem
                                            {
                                                Id = t.AffiliateTypeID,
                                                Description = _frenchLanguage ? t.Name_FR : t.Name_EN
                                            }).ToList();
        }

        public void PopulateMaintenanceResourcesBenchmarkViewData(ViewDataDictionary viewData, string resourceId)
        {
            var id = 0;

            if (!string.IsNullOrEmpty(resourceId))
            {
                id = int.Parse(resourceId);
            }

            var benchmarkTypes = (from b in this._repository.BenchmarkTypes
                                    where b.BenchmarkTypeID > 0 //Remove Non-Benchmark
                                    select new
                                    {
                                        Id = b.BenchmarkTypeID,
                                        Description = _frenchLanguage ? b.Name_FR : b.Name_EN
                                    }).ToList();

            //Workaround for Linq to Sql limitation using toString()
            viewData["benchmark_types"] = (from b in benchmarkTypes
                                            orderby b.Description
                                            select new ListItem
                                            {
                                                Id = b.Id.ToString(),
                                                Description = b.Description
                                            }).ToList();

            var benchmarkTiers = (from t in this._repository.BenchmarkTiers
                                    select new
                                    {
                                        Id = t.BenchmarkTierID,
                                        Description = _frenchLanguage ? t.Name_FR : t.Name_EN,
                                        FilterOnId = t.SportID
                                    }).ToList();

            //Workaround for Linq to Sql limitation using toString()
            viewData["benchmark_tiers"] = (from t in benchmarkTiers
                                            orderby t.Description
                                            select new FilteredListItem
                                            {
                                                Id = t.Id.ToString(),
                                                Description = t.Description,
                                                FilterOnId = t.FilterOnId
                                            }).ToList();
        }

        public void PopulateMaintenanceNSOMembersViewData(ViewDataDictionary viewData, string resourceId, string selectedSportId)
        {
            var id = 0;

            if (!string.IsNullOrEmpty(resourceId))
            {
                id = int.Parse(resourceId);
            }

            viewData["genders"] = this._decodeBL.GetHumanGenders(true);

            var countries = from c in this._repository.Countries
                            select new ListItem
                            {
                                Id = c.CountryID,
                                Description = _frenchLanguage ? c.Name_FR : c.Name_EN
                            };

            viewData["countries"] = countries.OrderBy(c => c.Description).ToList();

            viewData["resourceId"] = resourceId;

            if (id == 0)
            {
                viewData["resourceName"] = "Select a resource.";
                viewData["resourcePooled"] = false;
            }
            else
            {
                var resource = (from r in this._repository.Resources
                                where r.ResourceID == id
                                && r.Active
                                select r).SingleOrDefault();

                viewData["resourceName"] = resource.FirstName + " " + resource.LastName;
                viewData["resourcePooled"] = resource.Pooled;
            }

            viewData["years"] = (from y in this._repository.Years
                                    where y.active == null || (bool)y.active
                                    orderby y.YearID
                                    select new ListItem
                                    {
                                        Id = y.YearID,
                                        Description = y.YearID
                                    }).ToList();

            viewData["sportName"] = (from s in this._repository.Sports
                                        where s.SportID == selectedSportId
                                        && s.active
                                        select _frenchLanguage ? s.Name_FR : s.Name_EN).SingleOrDefault();

            var selectedSportLevel = (from s in this._repository.Sports
                                      where s.SportID == selectedSportId
                                      select s.SportLevelID).SingleOrDefault();

            if (selectedSportLevel == Constant.SportLevelId.Sport)
            {
                viewData["selectedSport"] = selectedSportId;
            }
            else if (selectedSportLevel == Constant.SportLevelId.Season)
            {
                viewData["selectedSport"] = (from s in this._repository.Sports
                                             where s.SportID == selectedSportId
                                             from c in s.ChildSports
                                             where c.active
                                             orderby c.Name_EN
                                             select c.SportID).FirstOrDefault();
            }
            else if (selectedSportLevel == Constant.SportLevelId.Olympic)
            {
                viewData["selectedSport"] = (from s in this._repository.Sports
                                             where s.SportID == selectedSportId
                                             from c in s.ChildSports
                                             where c.active
                                             from c2 in c.ChildSports
                                             where c2.active
                                             orderby c2.Name_EN
                                             select c2.SportID).FirstOrDefault();
            }
            else if (selectedSportLevel == Constant.SportLevelId.All)
            {
                viewData["selectedSport"] = (from s in this._repository.Sports
                                             where s.SportLevelID == Constant.SportLevelId.Sport
                                             && s.active
                                             orderby s.Name_EN
                                             select s.SportID).FirstOrDefault();
            }
        }

        public void PopulateMaintenanceISTMembersViewData(ViewDataDictionary viewData, string resourceId, string selectedSportId)
        {
            var id = 0;

            if (!string.IsNullOrEmpty(resourceId))
            {
                id = int.Parse(resourceId);
            }

            viewData["genders"] = this._decodeBL.GetHumanGenders(true);

            var countries = from c in this._repository.Countries
                            select new ListItem
                            {
                                Id = c.CountryID,
                                Description = _frenchLanguage ? c.Name_FR : c.Name_EN
                            };

            viewData["countries"] = countries.OrderBy(c => c.Description).ToList();

            viewData["resourceId"] = resourceId;

            if (id == 0)
            {
                viewData["resourceName"] = "Select a resource.";
                viewData["resourcePooled"] = false;
            }
            else
            {
                var resource = (from r in this._repository.Resources
                                where r.ResourceID == id
                                && r.Active
                                select r).SingleOrDefault();

                viewData["resourceName"] = resource.FirstName + " " + resource.LastName;
                viewData["resourcePooled"] = resource.Pooled;
            }

            viewData["years"] = (from y in this._repository.Years
                                 where y.active == null || (bool)y.active
                                 orderby y.YearID
                                 select new ListItem
                                 {
                                     Id = y.YearID,
                                     Description = y.YearID
                                 }).ToList();

            viewData["sportName"] = (from s in this._repository.Sports
                                     where s.SportID == selectedSportId
                                     && s.active
                                     select _frenchLanguage ? s.Name_FR : s.Name_EN).SingleOrDefault();

            var selectedSportLevel = (from s in this._repository.Sports
                                      where s.SportID == selectedSportId
                                      select s.SportLevelID).SingleOrDefault();

            if (selectedSportLevel == Constant.SportLevelId.Sport)
            {
                viewData["selectedSport"] = selectedSportId;
            }
            else if (selectedSportLevel == Constant.SportLevelId.Season)
            {
                viewData["selectedSport"] = (from s in this._repository.Sports
                                             where s.SportID == selectedSportId
                                             from c in s.ChildSports
                                             where c.active
                                             orderby c.Name_EN
                                             select c.SportID).FirstOrDefault();
            }
            else if (selectedSportLevel == Constant.SportLevelId.Olympic)
            {
                viewData["selectedSport"] = (from s in this._repository.Sports
                                             where s.SportID == selectedSportId
                                             from c in s.ChildSports
                                             where c.active
                                             from c2 in c.ChildSports
                                             where c2.active
                                             orderby c2.Name_EN
                                             select c2.SportID).FirstOrDefault();
            }
            else if (selectedSportLevel == Constant.SportLevelId.All)
            {
                viewData["selectedSport"] = (from s in this._repository.Sports
                                             where s.SportLevelID == Constant.SportLevelId.Sport
                                             && s.active
                                             orderby s.Name_EN
                                             select s.SportID).FirstOrDefault();
            }
        }

        public List<ListItem> GetResourceClasses()
        {
            List<ListItem> resourceClasses = null;

            resourceClasses = (from rc in this._repository.ResourceClasses
                                select new ListItem
                                {
                                    Id = rc.ResourceClassID,
                                    Description = _frenchLanguage ? rc.Name_FR : rc.Name_EN
                                }).OrderBy(rc => rc.Description).ToList();

            return resourceClasses;
        }

        public IEnumerable<Common.Decode> GetCoachResources(string sportId)
        {
            if (string.IsNullOrEmpty(sportId))
            {
                sportId = null;
            }

            var resources = (from r in this._repository.Resources
                             where r.Active
                             && r.ResourceSpecialty != null
                             && r.ResourceSpecialty.CoachIndicator
                             && (sportId == null ||
                                    (from s in r.ResourceSports
                                     where (s.Sport.SportLevelID == Constant.SportLevelId.Event
                                             && s.Sport.ParentSport.ParentSport.SportID == sportId)
                                             ||
                                             (s.Sport.SportLevelID == Constant.SportLevelId.Discipline
                                             && s.Sport.ParentSport.SportID == sportId)
                                             ||
                                             (s.Sport.SportLevelID == Constant.SportLevelId.Sport
                                             && s.SportID == sportId)
                                     select s).Any())
                             select r).ToList();

            return (from r in resources
                    select new Common.Decode
                    { 
                        Id = r.ResourceID.ToString(),
                        IntId = r.ResourceID,
                        Name = FormatResourceName(r.ResourceID, r.LastName, r.FirstName, r.ResourceTypeID)
                    }).ToList();
        }

        public string GetResourceType(string id)
        {
            string resourceType = null;
            int resourceId = 0;

            if (!string.IsNullOrEmpty(id))
            {
                resourceId = int.Parse(id);
            }

            resourceType = (from r in this._repository.Resources
                            where r.ResourceID == resourceId
                            && r.Active
                            select r.ResourceTypeID).SingleOrDefault();

            return resourceType;
        }

        public List<ListItem> GetResourceQualificationTypes()
        {
            List<ListItem> qualificationTypes = null;

            qualificationTypes = (from q in this._repository.QualificationTypes

                                    select new ListItem
                                    {
                                        Id = q.QualificationTypeID,
                                        Description = _frenchLanguage ? q.Name_FR : q.Name_EN
                                    }).OrderBy(q => q.Description).ToList();

            return qualificationTypes;
        }

        public List<ListItem> GetResourceSpecialties(string resourceType, bool includeNullItem = false)
        {
            List<ListItem> specialties = null;

            specialties = (from s in this._repository.ResourceSpecialties
                           where s.ResourceTypeID == resourceType
                           select new ListItem
                           {
                               Id = s.ResourceSpecialtyID,
                               Description = _frenchLanguage ? s.Name_FR : s.Name_EN
                           }).OrderBy(s => s.Description).ToList();

            if (includeNullItem)
            {
                specialties.InsertNullListItem(_frenchLanguage);
            }

            return specialties;
        }

        public int DeleteResourceSport(int resourceSportId)
        {
            int result = 0;

            var output = this._repository.uspDeleteResourceSport(resourceSportId).SingleOrDefault();
            result = output == null ? result : (int)output;

            return result;
        }

        public int DeleteResourceDirectAthleteSupport(int resourceDirectAthleteSupportId)
        {
            int result = 0;

            var output = this._repository.uspDeleteResourceDirectAthleteSupport(resourceDirectAthleteSupportId).SingleOrDefault();
            result = output == null ? result : (int)output;

            return result;
        }

        public int DeleteResourceAffiliate(int resourceAffiliateId)
        {
            int result = 0;

            var output = this._repository.uspDeleteResourceAffiliate(resourceAffiliateId).SingleOrDefault();
            result = output == null ? result : (int)output;

            return result;
        }

        public int DeleteResourceQualification(int resourceQualificationId)
        {
            int result = 0;

            var output = this._repository.uspDeleteResourceQualification(resourceQualificationId).SingleOrDefault();
            result = output == null ? result : (int)output;

            return result;
        }

        public int DeleteBenchmarkResource(int benchmarkResourceId)
        {
            int result = 0;

            var output = this._repository.uspDeleteBenchmarkResource(benchmarkResourceId).SingleOrDefault();
            result = output == null ? result : (int)output;

            return result;
        }

        public List<int> GetResourceSportIdsByResourceSport(int resourceId, string sportId, string yearId)
        {
            return (from s in this._repository.ResourceSports
                    where s.ResourceID == resourceId
                    && s.SportID == sportId
                    && s.YearID == yearId
                    select s.ResourceSportID).ToList();
        }

        public List<int> GetBenchmarkResourceIdsByResourceSportYearTypeTier(int resourceSportId, string yearId, int benchmarkTypeId, int benchmarkTierId)
        {
            return (from s in this._repository.BenchmarkResources
                    where s.ResourceSportID == resourceSportId && s.YearID == yearId && s.BenchmarkTypeID == benchmarkTypeId && s.BenchmarkTierID == benchmarkTierId
                    select s.BenchmarkResourceID).ToList();
        }

        public List<int> GetResourceDirectAthleteSupportIdsByResourceSupportYear(int resourceId, string yearId, string directAthleteSupportId)
        {
            return (from s in this._repository.ResourceDirectAthleteSupports
                    where s.ResourceID == resourceId && s.YearID == yearId && s.DirectAthleteSupportID == directAthleteSupportId
                    select s.ResourceDirectAthleteSupportID).ToList();
        }

        public List<int> GetResourceAffiliateIdsByResourceTypeNameYear(int resourceId, string affiliateTypeId, string affiliateName, string yearFromId)
        {
            return (from s in this._repository.ResourceAffiliates
                    where s.ResourceID == resourceId && s.AffiliateTypeID == affiliateTypeId && s.AffiliateName == affiliateName && s.YearFromID == yearFromId
                    select s.ResourceAffiliateID).ToList();
        }

        private string Parse3rdLevelSportId(string sportId)
        {
            if (string.IsNullOrEmpty(sportId)) return null;

            var sport = (from s in this._repository.Sports
                       where s.SportID == sportId
                       select s).FirstOrDefault();

            if (sport == null) return null;

            if (sport.SportLevelID == Constant.SportLevelId.Sport)
            {
                return sportId.Substring(0, sportId.Length - 2);
            }
            else
            {
                return sportId;
            }
        }

        public List<MaintenanceISTMembersPoolInfoViewModel> GetMaintenanceISTMembersPoolInfoViewModel(int resourceId)
        {
            List<MaintenanceISTMembersPoolInfoViewModel> model = null;

            var resource = (from r in this._repository.Resources
                            where r.ResourceID == resourceId
                            && r.Active
                            select r).SingleOrDefault();

            if (resource != null)
            {
                var results = (from p in this._repository.ResourcePoolAssignments
                               where (resource.Pooled && p.ResourceIDPool == resource.ResourceID)
                               || (p.ResourceIDAssignment == resource.ResourceID)
                               select new
                               {
                                   HasComments = !string.IsNullOrEmpty(p.Comments),
                                   ResourceIdAssignment = p.ResourceIDAssignment,
                                   ResourceIdAssignmentFirstName = p.Resource.FirstName,
                                   ResourceIdAssignmentLastName = p.Resource.LastName,
                                   ResourceIdAssignmentResourceId = p.Resource.ResourceID,
                                   ResourceIdAssignmentResourceTypeName = _frenchLanguage ? p.Resource.ResourceType.Name_FR : p.Resource.ResourceType.Name_EN,
                                   ResourceIdPool = p.ResourceIDPool,
                                   ResourceIdPoolFirstName = p.Resource1.FirstName,
                                   ResourceIdPoolLastName = p.Resource1.LastName,
                                   ResourceIdPoolResourceId = p.Resource1.ResourceID,
                                   ResourceIdPoolResourceTypeName = _frenchLanguage ? p.Resource1.ResourceType.Name_FR : p.Resource1.ResourceType.Name_EN,
                                   ResourcePoolAssignmentId = p.ResourcePoolAssignmentID
                               }).ToList();

                model = (from r in results
                         select new MaintenanceISTMembersPoolInfoViewModel
                         {
                             HasComments = r.HasComments,
                             ResourceIdAssignment = r.ResourceIdAssignment,
                             ResourceIdAssignmentName = string.Format("{0} - {1} {2} [{3}]", r.ResourceIdAssignmentResourceId, r.ResourceIdAssignmentFirstName, r.ResourceIdAssignmentLastName, r.ResourceIdAssignmentResourceTypeName),
                             ResourceIdPool = r.ResourceIdPool,
                             ResourceIdPoolName = string.Format("{0} - {1} {2} [{3}]", r.ResourceIdPoolResourceId, r.ResourceIdPoolFirstName, r.ResourceIdPoolLastName, r.ResourceIdPoolResourceTypeName),
                             ResourcePoolAssignmentId = r.ResourcePoolAssignmentId
                         }).ToList();
            }

            return model;
        }

        public List<MaintenanceNSOMembersPoolInfoViewModel> GetMaintenanceNSOMembersPoolInfoViewModel(int resourceId)
        {
            List<MaintenanceNSOMembersPoolInfoViewModel> model = null;

            var resource = (from r in this._repository.Resources
                            where r.ResourceID == resourceId
                            && r.Active
                            select r).SingleOrDefault();

            if (resource != null)
            {
                var results = (from p in this._repository.ResourcePoolAssignments
                               where (resource.Pooled && p.ResourceIDPool == resource.ResourceID)
                               || (p.ResourceIDAssignment == resource.ResourceID)
                               select new
                               {
                                   HasComments = !string.IsNullOrEmpty(p.Comments),
                                   ResourceIdAssignment = p.ResourceIDAssignment,
                                   ResourceIdAssignmentFirstName = p.Resource.FirstName,
                                   ResourceIdAssignmentLastName = p.Resource.LastName,
                                   ResourceIdAssignmentResourceId = p.Resource.ResourceID,
                                   ResourceIdAssignmentResourceTypeName = _frenchLanguage ? p.Resource.ResourceType.Name_FR : p.Resource.ResourceType.Name_EN,
                                   ResourceIdPool = p.ResourceIDPool,
                                   ResourceIdPoolFirstName = p.Resource1.FirstName,
                                   ResourceIdPoolLastName = p.Resource1.LastName,
                                   ResourceIdPoolResourceId = p.Resource1.ResourceID,
                                   ResourceIdPoolResourceTypeName = _frenchLanguage ? p.Resource1.ResourceType.Name_FR : p.Resource1.ResourceType.Name_EN,
                                   ResourcePoolAssignmentId = p.ResourcePoolAssignmentID
                               }).ToList();

                model = (from r in results
                         select new MaintenanceNSOMembersPoolInfoViewModel
                         {
                             HasComments = r.HasComments,
                             ResourceIdAssignment = r.ResourceIdAssignment,
                             ResourceIdAssignmentName = string.Format("{0} - {1} {2} [{3}]", r.ResourceIdAssignmentResourceId, r.ResourceIdAssignmentFirstName, r.ResourceIdAssignmentLastName, r.ResourceIdAssignmentResourceTypeName),
                             ResourceIdPool = r.ResourceIdPool,
                             ResourceIdPoolName = string.Format("{0} - {1} {2} [{3}]", r.ResourceIdPoolResourceId, r.ResourceIdPoolFirstName, r.ResourceIdPoolLastName, r.ResourceIdPoolResourceTypeName),
                             ResourcePoolAssignmentId = r.ResourcePoolAssignmentId
                         }).ToList();
            }

            return model;
        }

        public int AddResourcePoolAssignment(
	        int resourceIdPool,
	        int resourceIdAssignment)
        {
            int changes = 0;

            var returnValue = this._repository.uspAddResourcePoolAssignment(
                resourceIdPool,
                resourceIdAssignment,
                null).SingleOrDefault();

            changes = returnValue == null ? changes : (int)returnValue;

            return changes;
        }

        public int DeleteResourcePoolAssignment(int resourcePoolAssignmentId)
        {
            int result = 0;

            var output = this._repository.uspDeleteResourcePoolAssignment(resourcePoolAssignmentId).SingleOrDefault();
            result = output == null ? result : (int)output;

            return result;
        }

        public List<ListItem> GetResourcePoolAssignmentList(int resourceId)
        {
            var resource = (from r in this._repository.Resources
                            where r.ResourceID == resourceId
                            select r).SingleOrDefault();

            List<ListItem> assignmentValues = null;

            if (resource.Pooled)
            {
                var assignedResources = (from p in this._repository.ResourcePoolAssignments
                                         where p.ResourceIDPool == resource.ResourceID
                                         select p.ResourceIDAssignment).ToList();

                var results = (from r in this._repository.Resources
                               where !assignedResources.Contains(r.ResourceID)
                                && r.ResourceTypeID == resource.ResourceTypeID
                                && !r.Pooled
                                && r.Active
                               select new
                               {
                                   ResourceId = r.ResourceID,
                                   FirstName = r.FirstName,
                                   LastName = r.LastName,
                                   ResourceTypeName = _frenchLanguage ? r.ResourceType.Name_FR : r.ResourceType.Name_EN
                               }).ToList();

                assignmentValues = (from r in results
                                    orderby r.FirstName, r.LastName
                                    select new ListItem
                                    {
                                        Id = r.ResourceId.ToString(),
                                        Description = string.Format("{0} - {1} {2} [{3}]", r.ResourceId, r.FirstName, r.LastName, r.ResourceTypeName)
                                    }).ToList();
            }
            else
            {

                var pools = (from p in this._repository.ResourcePoolAssignments
                             where p.ResourceIDAssignment == resource.ResourceID
                             select p.ResourceIDPool).ToList();

                var results = (from r in this._repository.Resources
                               where !pools.Contains(r.ResourceID)
                                && r.ResourceTypeID == resource.ResourceTypeID
                                && r.Pooled
                                && r.Active
                               select new
                               {
                                   ResourceId = r.ResourceID,
                                   FirstName = r.FirstName,
                                   LastName = r.LastName,
                                   ResourceTypeName = _frenchLanguage ? r.ResourceType.Name_FR : r.ResourceType.Name_EN
                               }).ToList();

                assignmentValues = (from r in results
                                    orderby r.FirstName, r.LastName
                                    select new ListItem
                                    {
                                        Id = r.ResourceId.ToString(),
                                        Description = string.Format("{0} - {1} {2} [{3}]", r.ResourceId, r.FirstName, r.LastName, r.ResourceTypeName)
                                    }).ToList();
            }

            return assignmentValues;
        }

        private IQueryable<MaintenanceAthletesAthleteGridViewModel> FilterAthletes(IQueryable<MaintenanceAthletesAthleteGridViewModel> modelQuery, IFilterDescriptor iFilter)
        {
            var filter = (FilterDescriptor)iFilter;

            var valueObjectString = filter.Value.ToString();
            var filterValue = valueObjectString.ToLower();

            if (filter.Member == "FirstName")
            {
                switch (filter.Operator)
                {
                    case FilterOperator.Contains:
                        modelQuery = modelQuery.Where(r => r.FirstName.ToLower().Contains(filterValue));
                        break;
                    case FilterOperator.EndsWith:
                        modelQuery = modelQuery.Where(r => r.FirstName.ToLower().EndsWith(filterValue));
                        break;
                    case FilterOperator.IsEqualTo:
                        modelQuery = modelQuery.Where(r => r.FirstName.ToLower().Equals(filterValue));
                        break;
                    case FilterOperator.IsNotEqualTo:
                        modelQuery = modelQuery.Where(r => !r.FirstName.ToLower().Equals(filterValue));
                        break;
                    case FilterOperator.StartsWith:
                        modelQuery = modelQuery.Where(r => r.FirstName.ToLower().StartsWith(filterValue));
                        break;
                }
            }

            if (filter.Member == "LastName")
            {
                switch (filter.Operator)
                {
                    case FilterOperator.Contains:
                        modelQuery = modelQuery.Where(r => r.LastName.ToLower().Contains(filterValue));
                        break;
                    case FilterOperator.EndsWith:
                        modelQuery = modelQuery.Where(r => r.LastName.ToLower().EndsWith(filterValue));
                        break;
                    case FilterOperator.IsEqualTo:
                        modelQuery = modelQuery.Where(r => r.LastName.ToLower().Equals(filterValue));
                        break;
                    case FilterOperator.IsNotEqualTo:
                        modelQuery = modelQuery.Where(r => !r.LastName.ToLower().Equals(filterValue));
                        break;
                    case FilterOperator.StartsWith:
                        modelQuery = modelQuery.Where(r => r.LastName.ToLower().StartsWith(filterValue));
                        break;
                }
            }

            if (filter.Member == "CountryId")
            {
                switch (filter.Operator)
                {
                    case FilterOperator.Contains:
                        modelQuery = modelQuery.Where(r => r.CountryName.ToLower().Contains(filterValue));
                        break;
                    case FilterOperator.EndsWith:
                        modelQuery = modelQuery.Where(r => r.CountryName.ToLower().EndsWith(filterValue));
                        break;
                    case FilterOperator.IsEqualTo:
                        modelQuery = modelQuery.Where(r => r.CountryName.ToLower().Equals(filterValue));
                        break;
                    case FilterOperator.IsNotEqualTo:
                        modelQuery = modelQuery.Where(r => !r.CountryName.ToLower().Equals(filterValue));
                        break;
                    case FilterOperator.StartsWith:
                        modelQuery = modelQuery.Where(r => r.CountryName.ToLower().StartsWith(filterValue));
                        break;
                }
            }

            return modelQuery;
        }

        private IQueryable<MaintenanceAthletesAthleteGridViewModel> FilterAthletes(IQueryable<MaintenanceAthletesAthleteGridViewModel> modelQuery, IList<IFilterDescriptor> filters)
        {
            foreach (var ifilter in filters)
            {
                if (ifilter.GetType() == typeof(CompositeFilterDescriptor))
                {
                    modelQuery = FilterAthletes(modelQuery, ((CompositeFilterDescriptor)ifilter).FilterDescriptors);
                }
                else
                {
                    modelQuery = FilterAthletes(modelQuery, ifilter);
                }
            }

            return modelQuery;
        }

        private IQueryable<MaintenanceISTMembersGridViewModel> FilterISTMembers(IQueryable<MaintenanceISTMembersGridViewModel> modelQuery, IFilterDescriptor iFilter)
        {
            var filter = (FilterDescriptor)iFilter;

            var valueObjectString = filter.Value.ToString();
            var filterValue = valueObjectString.ToLower();

            if (filter.Member == "FirstName")
            {
                switch (filter.Operator)
                {
                    case FilterOperator.Contains:
                        modelQuery = modelQuery.Where(r => r.FirstName.ToLower().Contains(filterValue));
                        break;
                    case FilterOperator.EndsWith:
                        modelQuery = modelQuery.Where(r => r.FirstName.ToLower().EndsWith(filterValue));
                        break;
                    case FilterOperator.IsEqualTo:
                        modelQuery = modelQuery.Where(r => r.FirstName.ToLower().Equals(filterValue));
                        break;
                    case FilterOperator.IsNotEqualTo:
                        modelQuery = modelQuery.Where(r => !r.FirstName.ToLower().Equals(filterValue));
                        break;
                    case FilterOperator.StartsWith:
                        modelQuery = modelQuery.Where(r => r.FirstName.ToLower().StartsWith(filterValue));
                        break;
                }
            }

            if (filter.Member == "LastName")
            {
                switch (filter.Operator)
                {
                    case FilterOperator.Contains:
                        modelQuery = modelQuery.Where(r => r.LastName.ToLower().Contains(filterValue));
                        break;
                    case FilterOperator.EndsWith:
                        modelQuery = modelQuery.Where(r => r.LastName.ToLower().EndsWith(filterValue));
                        break;
                    case FilterOperator.IsEqualTo:
                        modelQuery = modelQuery.Where(r => r.LastName.ToLower().Equals(filterValue));
                        break;
                    case FilterOperator.IsNotEqualTo:
                        modelQuery = modelQuery.Where(r => !r.LastName.ToLower().Equals(filterValue));
                        break;
                    case FilterOperator.StartsWith:
                        modelQuery = modelQuery.Where(r => r.LastName.ToLower().StartsWith(filterValue));
                        break;
                }
            }

            if (filter.Member == "CountryId")
            {
                switch (filter.Operator)
                {
                    case FilterOperator.Contains:
                        modelQuery = modelQuery.Where(r => r.CountryName.ToLower().Contains(filterValue));
                        break;
                    case FilterOperator.EndsWith:
                        modelQuery = modelQuery.Where(r => r.CountryName.ToLower().EndsWith(filterValue));
                        break;
                    case FilterOperator.IsEqualTo:
                        modelQuery = modelQuery.Where(r => r.CountryName.ToLower().Equals(filterValue));
                        break;
                    case FilterOperator.IsNotEqualTo:
                        modelQuery = modelQuery.Where(r => !r.CountryName.ToLower().Equals(filterValue));
                        break;
                    case FilterOperator.StartsWith:
                        modelQuery = modelQuery.Where(r => r.CountryName.ToLower().StartsWith(filterValue));
                        break;
                }
            }

            return modelQuery;
        }

        private IQueryable<MaintenanceISTMembersGridViewModel> FilterISTMembers(IQueryable<MaintenanceISTMembersGridViewModel> modelQuery, IList<IFilterDescriptor> filters)
        {
            foreach (var ifilter in filters)
            {
                if (ifilter.GetType() == typeof(CompositeFilterDescriptor))
                {
                    modelQuery = FilterISTMembers(modelQuery, ((CompositeFilterDescriptor)ifilter).FilterDescriptors);
                }
                else
                {
                    modelQuery = FilterISTMembers(modelQuery, ifilter);
                }
            }

            return modelQuery;
        }

        private IQueryable<MaintenanceNSOMembersGridViewModel> FilterNSOMembers(IQueryable<MaintenanceNSOMembersGridViewModel> modelQuery, IFilterDescriptor iFilter)
        {
            var filter = (FilterDescriptor)iFilter;

            var valueObjectString = filter.Value.ToString();
            var filterValue = valueObjectString.ToLower();

            if (filter.Member == "FirstName")
            {
                switch (filter.Operator)
                {
                    case FilterOperator.Contains:
                        modelQuery = modelQuery.Where(r => r.FirstName.ToLower().Contains(filterValue));
                        break;
                    case FilterOperator.EndsWith:
                        modelQuery = modelQuery.Where(r => r.FirstName.ToLower().EndsWith(filterValue));
                        break;
                    case FilterOperator.IsEqualTo:
                        modelQuery = modelQuery.Where(r => r.FirstName.ToLower().Equals(filterValue));
                        break;
                    case FilterOperator.IsNotEqualTo:
                        modelQuery = modelQuery.Where(r => !r.FirstName.ToLower().Equals(filterValue));
                        break;
                    case FilterOperator.StartsWith:
                        modelQuery = modelQuery.Where(r => r.FirstName.ToLower().StartsWith(filterValue));
                        break;
                }
            }

            if (filter.Member == "LastName")
            {
                switch (filter.Operator)
                {
                    case FilterOperator.Contains:
                        modelQuery = modelQuery.Where(r => r.LastName.ToLower().Contains(filterValue));
                        break;
                    case FilterOperator.EndsWith:
                        modelQuery = modelQuery.Where(r => r.LastName.ToLower().EndsWith(filterValue));
                        break;
                    case FilterOperator.IsEqualTo:
                        modelQuery = modelQuery.Where(r => r.LastName.ToLower().Equals(filterValue));
                        break;
                    case FilterOperator.IsNotEqualTo:
                        modelQuery = modelQuery.Where(r => !r.LastName.ToLower().Equals(filterValue));
                        break;
                    case FilterOperator.StartsWith:
                        modelQuery = modelQuery.Where(r => r.LastName.ToLower().StartsWith(filterValue));
                        break;
                }
            }

            if (filter.Member == "CountryId")
            {
                switch (filter.Operator)
                {
                    case FilterOperator.Contains:
                        modelQuery = modelQuery.Where(r => r.CountryName.ToLower().Contains(filterValue));
                        break;
                    case FilterOperator.EndsWith:
                        modelQuery = modelQuery.Where(r => r.CountryName.ToLower().EndsWith(filterValue));
                        break;
                    case FilterOperator.IsEqualTo:
                        modelQuery = modelQuery.Where(r => r.CountryName.ToLower().Equals(filterValue));
                        break;
                    case FilterOperator.IsNotEqualTo:
                        modelQuery = modelQuery.Where(r => !r.CountryName.ToLower().Equals(filterValue));
                        break;
                    case FilterOperator.StartsWith:
                        modelQuery = modelQuery.Where(r => r.CountryName.ToLower().StartsWith(filterValue));
                        break;
                }
            }

            return modelQuery;
        }

        private IQueryable<MaintenanceNSOMembersGridViewModel> FilterNSOMembers(IQueryable<MaintenanceNSOMembersGridViewModel> modelQuery, IList<IFilterDescriptor> filters)
        {
            foreach (var ifilter in filters)
            {
                if (ifilter.GetType() == typeof(CompositeFilterDescriptor))
                {
                    modelQuery = FilterNSOMembers(modelQuery, ((CompositeFilterDescriptor)ifilter).FilterDescriptors);
                }
                else
                {
                    modelQuery = FilterNSOMembers(modelQuery, ifilter);
                }
            }

            return modelQuery;
        }

        public static string FormatResourceName(int resourceId, string lastName, string firstName, string orgType)
        {
            return string.Format("{1}, {2} [{0}] - {3}", orgType, lastName, firstName, resourceId);
        }
    }
}
